
# "file command" rules for EXEPACK-compressed DOS EXE files
#
# By Jason Summers, 2024 - Not copyrighted

0       name        exe_exepack

# @6 = number of relocations, expecting 0
>6                  uleshort          0x0000
# @16 = SP register, expecting 0x80 in all EXEPACK files
>>16                uleshort          0x0080
# @20 = IP register, expecting 16 or 18
>>>20               uleshort&0xfffd   0x0010
>>>>0     use    exepack_part2

0         name   exepack_part2
# Calculate the start-of-execution point...
# @8 = header size, in paragraphs (usually 32*16=512, but not always)
>(8.s*16)       byte              x
# @22 = CS register, in paragraphs
>>&(22,s*16)    byte              x
# @20 = IP register. Should take us just past the "RB" signature if
#  it exists, so subtract 2 for "RB", and another -2 fudge factor for
#  the two "byte x" dummy bytes we read.
>>>&(20.s-4)    string            RB
>>>>0           byte              x     \b, EXEPACK compressed

>>>>0       byte    x     (version=
>>>>0       clear   x

# The numbers like "258" are the "decoder size", measured from the
# "entry point" (i.e., the end of the "RB" signature),
# to the start of the compressed relocation table
# (generally the end of the "Packed file is corrupt" message).

# Note that the byte patterns we look for include a pointer to the
# relocation table. We may not identify every variant accurately,
# but if a number is printed, it's almost certain to be correct.

>>>>&137    string  \x12\x01\x0e\x1f\x8b\x1e
>>>>>&-40   string  \x92\x4e\xad\x91              \bEXEPATCK258
>>>>>0      default x                             \bcommon258

>>>>&135    string  \x25\x01\x0e\x1f\x8b\x1e
>>>>>&-38   string  \x92\x4e\xad\x91              \bEXEPATCK277
>>>>>0      default x                             \bcommon277

>>>>&137    string  \x27\x01\x0e\x1f\x8b\x1e
>>>>>&-40   string  \x92\x4e\xad\x91              \bEXEPATCK279
>>>>>0      default x                             \bcommon279

>>>>&141    string  \x2d\x01\x0e\x1f\x8b\x1e
>>>>>&-14   string  \xf3\xa4\xf6\xc2              \bLOWFIX283
>>>>>&-38   string  \x92\x4e\xad\x91              \bEXEPATCK283
>>>>>0      default x                             \bcommon283

>>>>&148    string  \x2d\x01\x0e\x1f\x8b\x1e      \bWordPerfect283

>>>>&146    string  \x32\x01\x0e\x1f\x8b\x1e
>>>>>&-148  string  \x05\x10\x00                  \bcommon290
# Mainly for the "DECOMP" variant:
>>>>>0      default x                             \bother290

# EXEPAKFIX-patched files always have an 18-byte header, so if the
# original file had a 16-byte header, the "decoder size" gets reduced
# by 2.
>>>>&141    string  \x12\x01\x0e\x1f\xfc\x8b      \bEXPAKFIX258to256
>>>>&141    string  \x25\x01\x0e\x1f\xfc\x8b      \bEXPAKFIX277to275
>>>>&141    string  \x27\x01\x0e\x1f\xfc\x8b      \bEXPAKFIX279to277
>>>>&141    string  \x2d\x01\x0e\x1f\xfc\x8b      \bEXPAKFIX283

>>>>0       default x                             \bunknown

>>>>0           byte      x   \b)

>>>>0           use               exepack_appl

0         name       exepack_appl

# This isn't a great way to identify these files. We could probably do
# better by looking at the overlay, but that's difficult.
>512      string     blREADINCL  \b, READMAKE (Wayne Software)

>4        uleshort   30
>>13945   string     Raymond\ Payette    \b, TEXE

# DemoMaker by R. Janorkar
# (v2.00 is PKLITE-compressed, so it's handled elsewhere.)
>0        clear   x
>816      string  \x0c\0\xf6\x01\0\0\x56\x01\0\0\0\0\x06\x02
>>0       byte    x   \b, DemoMaker (R. Janorkar) (v1.00-1.50)
>928      string  \0\0\xf7\x01\0\0\x56\x01\0\0\0\0\x0d\x02
>>0       byte    x   \b, DemoMaker (R. Janorkar) (v1.55)
>0        default x
>>512     string  \0\0DemoMaker\ v
>>>0      byte    x   \b, DemoMaker (R. Janorkar)
