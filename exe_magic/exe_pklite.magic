
# "file command" rules for PKLITE-compressed EXE files
#
# By Jason Summers, 2024 - Not copyrighted

# -----------
# [Notes on non-beta DOS EXE files]
#
# Goals:
# - Identify PKLITE-compressed EXE files, including those made by:
#   - Professional versions of PKLITE
#   - Various special unreleased versions of PKLITE, used to compress
#     PKWARE's software. This includes the executable part of some
#     self-extracting ZIP files.
# - Identify even files that use low-tech obfuscation: erasure of the
#   copyright message, or of the "Not enough memory" error message, etc.
# - Print the likely version number of PKLITE that made the file. We do
#   some amount of fingerprinting, instead of just trusting the version
#   label. (Though improvements are possible.)
# - Report if a PKLITE-compressed file is also a ZIP2EXE-style self-
#   extracting ZIP archive.

# Non-goals:
# - Identify files from beta versions of PKLITE (that's done separately).
# - Identify compressed COM format (that's done separately).
# - Identify PKLITE-compressed 16-bit Windows executables (that's done
#   separately).
# - Identify PKLITE32-compressed Windows executables.
# - Identify self-extracting ZIP files that aren't also PKLITE-compressed.
# - Identify files made by high-tech obfuscators, such as MEGALITE and
#   UN2PACK.
# - Identify files that use a simple obfuscation trick other than
#   those listed as goals.
# - Print various properties of the file, beyond the version number.

# -----------

# This part mainly tests the "code image" segment.
# Due to excessive PKLITE hacking, there just aren't any EXE header
# fields that we can really use to screen out files.

0               name            exe_pklite

>(8.s*16)       string          \xB8
>>&2            string          \xBA
# v1.00, 1.03, 1.05, and some "1.10" versions
>>>&2           string          \x8C\xDB\x03\xD8\x3B\x1E\x02\x00\x73
>>>>0   use   id_as_pklite_exe

>>>>28  clear            x
>>>>28  uleshort&0x0fff  0x100    (v1.00
>>>>>(8.s*16)   byte      x
>>>>>>&38       leshort   0x014c   \bbeta900717)
>>>>>>&38       leshort   !0x014c  \b)
>>>>28  uleshort&0x0fff  0x103    (v1.03)
>>>>28  uleshort&0x0fff  0x105    (v1.05)
>>>>28  uleshort&0x0fff  0x106    (LOWFIX patched)
>>>>28  uleshort&0x0fff  0x10a    (special version)
>>>>28  default          x        (v1.00-1.05)

>>>>0   use   pklite_exe_check_mod
>>>>0   use   pklite_dos_exe_appl

# v1.12, 1.13, and some "1.20" versions

>>>&2           string          \x05\x00\x00\x3B\x06\x02\x00\x73
>>>>0   use   id_as_pklite_exe

>>>>28  clear            x
>>>>28  uleshort&0x0fff  0x10c    (v1.12)
>>>>28  uleshort&0x0fff  0x10d    (v1.13)
>>>>28  uleshort&0x0fff  0x114    (special version)
>>>>28  default          x        (v1.12-1.13)

>>>>0   use   pklite_exe_check_mod
>>>>0   use   pklite_dos_exe_appl

# v1.14, 1.15, and some "1.20" versions

>>>&2           string          \x05\x00\x00\x3B\x06\x02\x00\x72
>>>>0   use   id_as_pklite_exe

>>>>28  clear            x
>>>>28  uleshort&0x0fff  0x10e    (v1.14)
>>>>28  uleshort&0x0fff  0x10f    (v1.15)
>>>>28  uleshort&0x0fff  0x114    (special version)
>>>>28  default          x        (v1.14-1.15)

>>>>0   use   pklite_exe_check_mod
>>>>0   use   pklite_dos_exe_appl

# v1.50, 2.01
>(8.s*16)       string          \x50\xB8
>>&2            string          \xBA
>>>&2           string          \x05\x00\x00\x3B\x06\x02\x00\x72
>>>>0   use   id_as_pklite_exe

>>>>28  clear            x
>>>>28  uleshort&0x0fff  0x132    (v1.50)
>>>>28  uleshort&0x0fff  0x201    (v2.01)
>>>>28  default          x        (v1.50-2.01)

>>>>0   use   pklite_exe_check_mod
>>>>0   use   pklite_dos_exe_appl

# -----------
# Report if the PKLITE file seems to have been patched to run
# extra code before the PKLITE code.
# Could be an application format, or a tamper detection system,
# or even another (very weak) EXE compressor, etc.

0      name       pklite_exe_check_mod
>20    string     !\x00\x01\xf0\xff    (patched)

# -----------
# Check for some known PKLITE-derived formats.

0      name       pklite_dos_exe_appl

# Offset 12890 is the first meaningful place in the file where all
# the ZIP2EXE formats differ. (2.04e and 2.04g are very similar.)

>12890  string          \xaf\x00\x00\x4a\x97\xe9\x99\x3b\x3d\x3b\x3f\xdd
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04c

>12890  string          \xe1\x30\x14\x79\x49\x35\x54\x90\x41\x30\x03\x80
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04c-Reg.

>12890  string          \x00\x5a\xe2\x82\x96\x77\x5e\x9f\x7f\x3a\x26\x76
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04e

>12890  string          \x32\xf9\xdb\xb8\x8a\xfc\x83\x41\x92\xe9\xcb\x89
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04e-Reg.

>12890  string          \x30\x5a\xe2\x82\x96\x77\x5e\x9f\x7f\x3a\x06\x76
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04g

# "Shareware Marketing" edition
>12890  string          \xdb\x99\xdf\xcc\xdf\x91\x1f\x4c\xbb\x88\xcf\x78
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04g (SwMktg)

>12890  string          \xf4\xd4\x00\x48\xa5\x89\xf9\x84\x44\x91\xe4\xc4
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04g-Reg.

>12890  string          \x8e\x3f\x9e\xcf\x9e\x4e\x2e\x00\x00\x2a\xde\xbe
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04g-Reg. (SwMktg)

>12890  string          \xca\xea\x0c\xfe\x6e\x6a\xe8\xd8\xa8\x7c\xac\xd8
>>0     byte            x      \b, ZIP2EXE from PKZIP v2.04-Reg. (French)

>12890  string          \x58\x5b\xce\xa9\x88\x16\x33\x11\x06\xc8\xdb\x80
>>0     byte            x      \b, ZIP2EXE from PKZIP/DOS v2.50

>12890  string          \xcd\x0c\xe5\x78\xe4\xaa\xe5\x84\x9b\xa4\x58\xd3
>>0     byte            x      \b, ZIP2EXE from PKZIP/DOS v2.50-Reg.

>12890  string          \xda\xe4\x1e\x40\x86\xcf\x26\x30\xb8\xc6\x3d\xf8
>>0     byte            x      \b, PKSFX v2.49 (via PKZIP/Windows v2.50+)

# LM-EXE executable text by RKT-LANDMARK. Uncommon format, but easy.
>55     string          RKT-LANDMARK     \b, LM-EXE

# DemoMaker v2.00
# (v1.x is only EXEPACK-compressed, so it's handled elsewhere.)
>0      clear    x
>1124   string   \x19\x69\x0f\x03\x7c\x52\x1e\x1f\xb8\x65\x34\x43
>>0     byte     x    \b, DemoMaker (R. Janorkar) (v2.x)
>0      default  x
>>48    string   \xb2\x21\x0e\xb4\x5a\xd9\xeb\xc1\x0e\xb4\xba\xd8
>>>0    byte     x    \b, DemoMaker (R. Janorkar) (v2.x)

# -----------
# Rules for beta versions
#
# The PKLITE beta software may be found at
# http://cd.textfiles.com/swinnund/disk3/FILEUTIL/PKLITE.ZIP

0               name      exe_pklite_beta

# @24 = reloc. table offset, should be 80
>24               uleshort      80
# @6 = number of relocs, should be 0
>>6               uleshort      0

# SP reg.   | versions
# -------   | -----------
# 512       | 1.12-1.15, 1.50-2.01
# 1024      | beta, 1.00-1.05, "1.10"
# (various) | "1.20"

# @16 = SP register, should be 0x0400
>>>16             uleshort      0x0400
# @20 = IP register, should be 0x0100
>>>>20            uleshort      0x0100

# Our identification scheme requires that we calculate the EXE
# start-of-execution point.
# @8 = header size, in paragraphs
>>>>>(8.s*16)     byte      x
# @22 = CS register, in paragraphs
>>>>>>&(22,s*16)  byte      x
# Now add the IP register, which we already know is 0x0100 (256).
# (Include a fudge factor of -2 for the "byte x" dummy bytes we read.)
>>>>>>>&254       string    \x2E\x8C\x1E
>>>>>>>>&2        string    \x8B\x1E\x02\x00\x8C\xDA\x81
>>>>>>>>>0        use       id_as_pklite_exe
>>>>>>>>>0        byte      x    (v1.00beta900529)
# The next test is for files made with the "load high" option.
# (Rare. This part could be deleted.)
>>>>>>>>&2        string    \xFC\x8C\xC8\x2E\x2B\x06
>>>>>>>>>0        use       id_as_pklite_exe
>>>>>>>>>0        byte      x    (v1.00beta900529)

# -----------
# Rules for Windows 3.x files.
# The only released version of PKLITE that makes these files is 2.01.

0             name      exe_pklite_win3
>0            clear     x
# E.g. PKLITE 2.01.
>66           string    PKlite(R)
>>0           use       id_as_pklite_exe
>>0           use       exe_win3_pksfx
# E.g. PKZIP/Windows 2.50 (convert to PKSFX16).
>66           string    Pklite(R)
>>0           use       id_as_pklite_exe
>>0           use       exe_win3_pksfx
>0            default   x
# Don't know if this is a real signature, but "TN" and "T4"
# do appear in the PKLITE software.
>>(60.l+8)    string    TNT4
>>>0          use       id_as_pklite_exe
>>>0          use       exe_win3_pksfx

0             name      exe_win3_pksfx
# Can be made by PKZIP 2.50-2.60.03 for Windows, by converting to
# "PKSFX WIN16" format.
# Note: The pkzws201.exe and pk260w16.exe distribution files have different
# PKSFX structures, which we could look for, but it's not worth it if they
# are unique.
>590          string    PKSFX\ for\ Windows
>>0           byte      x       \b, ZIP self-extracting archive

# -----------

0       name     id_as_pklite_exe
>0      byte     x     \b, PKLITE compressed
