
# "file command" rules - Misc. EXE-based formats
#
# By Jason Summers, 2024 - Not copyrighted

# ----------

# SQWEZ self-extracting EXE, versions 1.0-2.0. (Later verions may be
# handled elsewhere.)
# These rules are fragile, and may not account for all versions.
# Note: The SQWEZ1_1.EXE distribution file seems to be in this format,
# but doesn't match any of the known versions.

0         string/b   MZ

>2        uleshort   0x0166
>>4       uleshort   0x0025
>>>19456  string     erawtfoS\ MJ       MS-DOS executable
# We'll call it "1.0", though it lacks a version number.
>>>>0     byte       x                  \b, SQWEZ (v1.0) self-extracting archive

>2        uleshort   0x00a8
>>4       uleshort   0x0026
>>>19112  string     erawtfoS\ MJ       MS-DOS executable
>>>>0     byte       x                  \b, SQWEZ (v1.1) self-extracting archive

>2        uleshort   0x00f8
>>4       uleshort   0x0024
>>>16767  string     Start\ expanding\ [    MS-DOS executable
>>>>0     byte       x                      \b, SQWEZ (v1.2) self-extracting archive

>2        uleshort   0x0104
>>4       uleshort   0x0024
>>>16779  string     Start\ expanding\ [    MS-DOS executable
>>>>0     byte       x                      \b, SQWEZ (v2.0) self-extracting archive

# ----------
# COMPACK-compressed EXE

0         string/b   MZ
>8        uleshort   0x0002
>>32      string     \xbd
>>>35     string     \x50\x06\x8c\xcb\x03\xdd\x8c\xd2\x4b\x8e\xdb\xbe
>>>>49    string     \xbf\x00\x07\x8e\xc2
>>>>>0    byte       x     MS-DOS executable
>>>>>0    byte       x     \b, COMPACK compressed

# ----------
# WWPACK-compressed EXE
#
# Goal is to identify files that can be made with a released version
# of WWPACK, except that we don't require the "WWP" signature to
# be intact.
# Special variants of WWPACK, that we don't identify, are known to
# exist.

0                   string/b    MZ

# @6 = number of relocs, should be 0
>6                  uleshort    0
# @8 = header size, should be 2
>>8                 uleshort    0x0002
# @16 = SP, should be 0x0150
>>>16               uleshort    0x0150
# @22 = CS, should be 0
>>>>22              leshort     0
# Could also test that reloc. tbl. offs. @24 = 28, but it wouldn't
# really help.

# @20 = IP register (expecting 1 or 4)
# +32 for the header and CS
>>>>>(20.s+32)      string      \xb8
>>>>>>&2            string      \x8c\xca\x03\xd0\x8c\xc9\x81\xc1
>>>>>>>0            byte        x   MS-DOS executable
>>>>>>>0            byte        x   \b, WWPACK compressed

# ----------
# TINYPROG-compressed EXE

0               string/b    MZ

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @16 = SP, should be 0x0300
>>>16           uleshort    0x0300
# @20 = IP, should be 0
>>>>20          uleshort    0
# @22 = CS, should be 0
>>>>>22         leshort     0
# @24 = reloc. table offset, should be 0
>>>>>>24        uleshort    0

# TODO: Don't rely on the "tz" signature.

>>>>>>>28       string      tz
>>>>>>>>30      ubyte       >0xc0
>>>>>>>>>30     ubyte       <0xc4
>>>>>>>>>>0     byte        x   MS-DOS executable
>>>>>>>>>>0     byte        x   \b, TINYPROG compressed

# ----------
# UC2EXE (from UltraCompressor II) -compressed EXE
#
0               string/b    MZ

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @20 = IP register, should be 12
>>>20           uleshort    0x000c
# @24 = reloc. table offset, should be 0
>>>>24          uleshort    0

# Calculate the EXE start-of-execution point.
# @22 = CS register, in paragraphs
>>>>>(22,s*16)      byte    x
# Add the IP register, +32 for header, -2 dummy "byte x"
>>>>>>&(20.s+30)    byte    x

# The VU.EXE file included with UltraCompressor II is UCEXE-compressed,
# but does not match the next pattern. The last 3 bytes, plus the next
# 2 untested bytes, are absent. I can't figure out why. If I decompress
# and recompress the file, the bytes are present.
>>>>>>>&0       string      \x50\x1E\x0E\x1F\xFC\x33\xF6\xE8

>>>>>>>>&2      string      \x16\x07\x33\xF6\x33\xFF\xB9
>>>>>>>>>&2     string      \xF3\xA5
>>>>>>>>>>0     byte        x   MS-DOS executable
>>>>>>>>>>0     byte        x   \b, UCEXE compressed

# ----------
# RNC PROPACK-compressed DOS EXE
#
# We try to identify the 3 known versions: 2.08, 2.14, 2.19.

0               string/b    MZ

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @20 = IP, should be 12 or 14 (0x0c or 0x0e)
>>>20           uleshort&0xfffd  0x000c

# Calculate the EXE start-of-execution point.
# @22 = CS register, in paragraphs
>>>>(22,s*16)   byte        x
# Add the IP register, +32 for header, -2 dummy "byte x"
>>>>>&(20.s+30) byte        x
# This pattern appears at the exec. point, or 1 byte past it.
>>>>>>&0  search/1  \x8c\xd3\x8e\xc3\x8c\xca\x8e\xda\x8b\x0e\x08\x00\x8b\xf1\x83
>>>>>>>0        byte        x   MS-DOS executable
>>>>>>>0        byte        x   \b, PROPACK compressed

# ----------
# Spacemaker-compressed EXE
0               string/b    MZ

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 0x0020
>>8             uleshort    0x0020
# @16 = SP, should be 0x0100
>>>16           uleshort    0x0100
# @20 = IP, should be 256
>>>>20          uleshort    0x0100
# @22 = CS, should be -16
>>>>>22         leshort     -16
>>>>>>512       string/b  \x9c\x55\x56\x8c\xcd\x83\xc5\x10\x8d\xb6
>>>>>>>&2       string    \x56\xbe
>>>>>>>>&2      string    \x56\xcb    MS-DOS executable
>>>>>>>>>0      byte      x           \b, Spacemaker compressed

# ----------
# PACK (by TurboPower Software) compressed DOS EXE

0               string/b    MZ

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002

# Calculate the EXE start-of-execution point.
# @22 = CS register, in paragraphs
>>>(22,s*16)    byte    x
# Add the IP register, +32 for header, -2 dummy "byte x"
>>>>&(20.s+30)  byte    x
>>>>>&0   string  \xEB\x08
>>>>>>&8  string  \x2E\x8C\x1E\x06\x00\x2E\x8C\x06\x08\x00\x8C\xC3\x83\xC3\x10\x8C
>>>>>>>0        byte    x   MS-DOS executable
>>>>>>>0        byte    x   \b, PACK (TurboPower) compressed

# ----------
# LHarc/LHA self-extracting EXE
#
# Goal is to identify DOS EXE files made by original versions
# of LHarc and LHA, and most hacks and derivatives thereof.
# We don't attempt to identify LHarc/LHA SFX files in general.
# Files contain a banner message similar to
# "LHarc's SFX 1.13S (c) Yoshi, 1989", but there are so
# many variants of it that we won't rely on it.

0               string/b    MZ

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @14 = SS, should be -16
>>>14           leshort     -16
# @16 = SP, should be 256
>>>>16          uleshort    0x0100
# @20 = IP, should be 256
>>>>>20         uleshort    0x0100
# @22 = CS, should be -16
>>>>>>22        leshort     -16
# e9 = a 2-byte JMP distance
>>>>>>>32       ubyte       0xe9
>>>>>>>>(33.s+35)   use     lha_sfx_exe_part2
# eb = a 1-byte JMP distance
>>>>>>>32       ubyte       0xeb
>>>>>>>>(33.b+34)   use     lha_sfx_exe_part2

0           name    lha_sfx_exe_part2
>0          string  \xFC\xBC\x00\x01
>>&0        string  \xBB
# (missing byte here is 0x05 or 0x06)
>>>&1       string  \x01\xE8
>>>>&2      string  \x8C\xC8        MS-DOS executable
>>>>>0      byte    x   \b, LHarc self-extracting archive

>>&0        string  \x8C\xC8\x05
# (missing byte here is 0x88 or 0x8C)
>>>&1       string  \x00\x8E\xC0    MS-DOS executable
>>>>0       byte    x   \b, LHA self-extracting archive
# (next byte is 0xE8 or 0xEB)
