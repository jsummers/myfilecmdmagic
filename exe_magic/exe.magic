
# "file command" rules - EXE-based formats
#
# By Jason Summers, 2024 - Not copyrighted

0       string      MZ
>0      use         exe_part2

0       string      ZM
>4      uleshort    >0
>>0     use         exe_part2

0       name        exe_part2
>0      byte        x       MS-DOS executable
>0      string      ZM      (ZM signature)
>0      clear       x
>24     uleshort    >63
>>0     use         exe_maybe_extended
>24     uleshort    0
>>0     use         exe_maybe_extended
>0      default     x
>>0     use         dosexe_main

0       name        exe_maybe_extended
>0      clear       x
>60     ulelong     >63
>>0     clear       x
# Set the current offset to point to the signature
>>(60.l-1)  byte    x
>>>0    clear       x
>>>&0   string      NE
>>>>0   use         exe_ne
>>>&0   string      PE\0\0
>>>>0   use         exe_pe
>>>&0   string      LX     \b, LX
>>>&0   string      LE     \b, LE
# If we didn't recognize the signature...
>>>0    default     x
>>>>0   use         dosexe_main
# If we couldn't even read the signature (due to EOF)...
>>0     default     x
>>>0    use         dosexe_main
# If the signature pointer was too small...
>0      default     x
>>0     use         dosexe_main

0       name        exe_ne
>0      byte        x      \b, NE
>(60.l+12)   uleshort  &0x8000   (DLL)
>(60.l+54)   ubyte     0x01   \b, for OS/2
>>0     use         exe_ne_arc_sfx
>(60.l+54)   ubyte     0x02   \b, for MS Windows
>>(60.l+63)  ubyte     x      (v%u
>>(60.l+62)  ubyte     x      \b.%u)
>>0     use         exe_pklite_win3
>0      use         exe_ne_icl

0       name        exe_pe
>0      byte        x      \b, PE
>(60.l+22)      uleshort    &0x2000   (DLL)
>(60.l+20)      uleshort    !0
>>(60.l+24)     uleshort    0x010b  \b, PE32
>>>(60.l+92)    uleshort    2       (GUI)
>>>(60.l+92)    uleshort    3       (console)
>>(60.l+24)     uleshort    0x020b  \b, PE32+
>>>(60.l+92)    uleshort    2       (GUI)
>>>(60.l+92)    uleshort    3       (console)

0       name        dosexe_main
>0      use         exe_exepack
>0      use         exe_lzexe
>0      use         exe_pklite
>0      use         exe_pklite_beta
>0      use         exe_diet
>0      use         exe_zip2exe
>0      use         exe_lha_sfx
>0      use         exe_wwpack
>0      use         exe_compack
>0      use         exe_tinyprog
>0      use         exe_uc2
>0      use         exe_rncpropack
>0      use         exe_larc_sfx
>0      use         exe_spacemaker
>0      use         exe_pack_turbopower
>0      use         exe_arc_sfx
>0      use         exe_paknogate_sfx
>0      use         exe_sqwez_old_sfx
>0      use         exe_gws
>0      use         exe_grabber
>0      use         exe_txt2exe_pfh
>0      use         exe_overlay

# ----------
# Various NE-based icon library formats

0           name        exe_ne_icl
# Segment count=0 seems like a useful filter, for the formats we
# identify.
>(60.l+28)  uleshort  0

# If MZ header is zeroed out
>>2         string    \0\0\0\0

>>>60    ulelong     64

# Easy Icons (Paul Traver). This is for the known versions for
# Windows 3.x (3.01, 3.07, 3.2.1).
>>>>45      string    PT    \b, Icon library (Easy Icons)

# This is a guess. Could be an .NIL file from Norton Icon Editor.
>>>>45      string    \0\0  \b, Icon library (Norton)

>>>60       ulelong   128
>>>>126     string    \0\0
>>>>>182    ubyte     0     \b, Icon library (Icon Manager, v<=2.1)
>>>>>182    ubyte     !0    \b, Icon library (Icon Manager, v3.1)
>>>>126     string    IM    \b, Icon library (Icon Manager, v>=3.1a)

# Easy Icons 9x patterns are unconfirmed.
>>>>126     string    ry
>>>>>103    string    EasyIcons   \b, Icon library (Easy Icons 95/98)

# If MZ header is not zeroed-out...
>>0         default   x

>>>60       ulelong   128
>>>>125     string    MIR   \b, Icon library (hDC Icon Designer)

# ----------
# SQWEZ self-extracting EXE, versions 1.0-2.0. (Later versions may be
# handled elsewhere.)
# These rules are fragile, and may not account for all versions.
# Note: The SQWEZ1_1.EXE distribution file seems to be in this format,
# but doesn't match any of the known versions.

0         name       exe_sqwez_old_sfx

>2        uleshort   0x0166
>>4       uleshort   0x0025
>>>19456  string     erawtfoS\ MJ
# We'll call it "1.0", though it lacks a version number.
>>>>0     byte       x           \b, SQWEZ self-extracting archive (v1.0)

>2        uleshort   0x00a8
>>4       uleshort   0x0026
>>>19112  string     erawtfoS\ MJ
>>>>0     byte       x           \b, SQWEZ self-extracting archive (v1.1)

>2        uleshort   0x00f8
>>4       uleshort   0x0024
>>>16767  string     Start\ expanding\ [
>>>>0     byte       x           \b, SQWEZ self-extracting archive (v1.2)

>2        uleshort   0x0104
>>4       uleshort   0x0024
>>>16779  string     Start\ expanding\ [
>>>>0     byte       x           \b, SQWEZ self-extracting archive (v2.0)

# ----------
# COMPACK-compressed EXE

0         name       exe_compack
>8        uleshort   0x0002
>>32      string     \xbd
>>>35     string     \x50\x06\x8c\xcb\x03\xdd\x8c\xd2\x4b\x8e\xdb\xbe
>>>>49    string     \xbf\x00\x07\x8e\xc2
>>>>>0    byte       x     \b, COMPACK compressed
>>>>>63     ubyte      0x42
>>>>>>71    ubyte      0x3a       (v4.4)
>>>>>>>282  string     BUILDSFX   \b, BUILDSFX self-extracting archive
>>>>>>71    ubyte      0x42       (v4.5)
>>>>>>>291  string     SFX\ code  \b, BUILDSFX self-extracting archive
>>>>>63     ubyte      0x8b       (v5.1)
>>>>>>108   string     SFX\ code  \b, BUILDSFX self-extracting archive

# ----------
# WWPACK-compressed EXE
#
# Goal is to identify files that can be made with a released version
# of WWPACK, except that we don't require the "WWP" signature to
# be intact.
# Special variants of WWPACK, that we don't identify, are known to
# exist.

0      name      exe_wwpack

# @6 = number of relocs, should be 0
>6                  uleshort    0
# @8 = header size, should be 2
>>8                 uleshort    0x0002
# @16 = SP, should be 0x0150
>>>16               uleshort    0x0150
# @22 = CS, should be 0
>>>>22              leshort     0
# Could also test that reloc. tbl. offs. @24 = 28, but it wouldn't
# really help.

# @20 = IP register (expecting 1 or 4)
# +32 for the header and CS
>>>>>(20.s+32)      string      \xb8
>>>>>>&2            string      \x8c\xca\x03\xd0\x8c\xc9\x81\xc1
>>>>>>>0            byte        x   \b, WWPACK compressed

# ----------
# TINYPROG-compressed EXE

0        name        exe_tinyprog

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @16 = SP, should be 0x0300
>>>16           uleshort    0x0300
# @20 = IP, should be 0
>>>>20          uleshort    0
# @22 = CS, should be 0
>>>>>22         leshort     0
# @24 = reloc. table offset, should be 0
>>>>>>24        uleshort    0
>>>>>>>0        use         exe_tinyprog_part2

0             name    exe_tinyprog_part2
# Expecting a 2-byte relative jump that we'll follow.
>32           ubyte   0xe9
# Read 2-byte int at the current offset (33).
# The JMP is from the end of the 2-byte int we read indirectly (",s"),
# so we need +2. The dummy byte we read directly gives us +1, so add
# the difference (2-1=1).
>>&(&0,s+1)   byte    x

# Expecting a 1-byte relative jump that we'll follow.
>>>&0         ubyte   0xeb
# The adjustments are +1 and -1, so no adjustment needed.
>>>>&(&0,b)   byte    x
>>>>>&0       string  \x50\xbe\x05\x01\x03\x36\x01\x01\x8c\xd2\x8c\xd8\x03\x44
>>>>>>0       byte    x       \b, TINYPROG compressed (old)
>>>>>&8       string  \x50\xbe\x05\x01\x03\x36\x01\x01\x8c\xd2\x8c\xd8\x03\x44
>>>>>>0       byte    x       \b, TINYPROG compressed (v3.x)

# ----------
# UC2EXE (from UltraCompressor II) -compressed EXE
#

0         name exe_uc2

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @20 = IP register, should be 12
>>>20           uleshort    0x000c
# @24 = reloc. table offset, should be 0
>>>>24          uleshort    0

# Calculate the EXE start-of-execution point.
# @22 = CS register, in paragraphs
>>>>>(22,s*16)      byte    x
# Add the IP register, +32 for header, -2 dummy "byte x"
>>>>>>&(20.s+30)    byte    x

# The VU.EXE file included with UltraCompressor II is UCEXE-compressed,
# but does not match the next pattern. The last 3 bytes, plus the next
# 2 untested bytes, are absent. I can't figure out why. If I decompress
# and recompress the file, the bytes are present.
>>>>>>>&0       string      \x50\x1E\x0E\x1F\xFC\x33\xF6\xE8

>>>>>>>>&2      string      \x16\x07\x33\xF6\x33\xFF\xB9
>>>>>>>>>&2     string      \xF3\xA5
>>>>>>>>>>0     byte        x   \b, UCEXE compressed

# ----------
# RNC PROPACK-compressed DOS EXE
#
# We try to identify the 3 known versions: 2.08, 2.14, 2.19.

0          name      exe_rncpropack

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @20 = IP, should be 12 or 14 (0x0c or 0x0e)
>>>20           uleshort&0xfffd  0x000c

# Calculate the EXE start-of-execution point.
# @22 = CS register, in paragraphs
>>>>(22,s*16)   byte        x
# Add the IP register, +32 for header, -2 dummy "byte x"
>>>>>&(20.s+30) byte        x
# This pattern appears at the exec. point, or 1 byte past it.
>>>>>>&0  search/1  \x8c\xd3\x8e\xc3\x8c\xca\x8e\xda\x8b\x0e\x08\x00\x8b\xf1\x83
>>>>>>>0        byte        x   \b, PROPACK compressed

# ----------
# Spacemaker-compressed EXE

0      name     exe_spacemaker

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 0x0020
>>8             uleshort    0x0020
# @16 = SP, should be 0x0100
>>>16           uleshort    0x0100
# @20 = IP, should be 256
>>>>20          uleshort    0x0100
# @22 = CS, should be -16
>>>>>22         leshort     -16
>>>>>>512       string    \x9c\x55\x56\x8c\xcd\x83\xc5\x10\x8d\xb6
>>>>>>>&2       string    \x56\xbe
>>>>>>>>&2      string    \x56\xcb
>>>>>>>>>0      byte      x           \b, Spacemaker compressed

# ----------
# PACK (by TurboPower Software) compressed DOS EXE

0               name       exe_pack_turbopower

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002

# Calculate the EXE start-of-execution point.
# @22 = CS register, in paragraphs
>>>(22,s*16)    byte    x
# Add the IP register, +32 for header, -2 dummy "byte x"
>>>>&(20.s+30)  byte    x
>>>>>&0   string  \xEB\x08
>>>>>>&8  string  \x2E\x8C\x1E\x06\x00\x2E\x8C\x06\x08\x00\x8C\xC3\x83\xC3\x10\x8C
>>>>>>>0        byte    x   \b, PACK (TurboPower) compressed

# ----------
# SCRNCH compressed DOS EXE
# @6 = number of relocs, should be 0
>6              uleshort    0

>>(8.s*16)   string  \xbb\xff\xff\xb4\x4a\xcd\x21\x81\xeb
>>>0         byte    x   \b, SCRNCH compressed (v1.00)

>>(8.s*16)   string  \xeb\x13sC  \b, SCRNCH compressed (v1.02)
>>>&0        string  hf   (run mode)
>>>&0        string  yf   (write mode)

# ----------
# LHarc/LHA self-extracting EXE
#
# Goal is to identify DOS EXE files made by original versions
# of LHarc and LHA, and most hacks and derivatives thereof.
# We don't attempt to identify LHarc/LHA SFX files in general.
# Files contain a banner message similar to
# "LHarc's SFX 1.13S (c) Yoshi, 1989", but there are so
# many variants of it that we won't rely on it.

0               name        exe_lha_sfx

# @6 = number of relocs, should be 0
>6              uleshort    0
# @8 = header size, should be 2
>>8             uleshort    0x0002
# @14 = SS, should be -16
>>>14           leshort     -16
# @16 = SP, should be 256
>>>>16          uleshort    0x0100
# @20 = IP, should be 256
>>>>>20         uleshort    0x0100
# @22 = CS, should be -16
>>>>>>22        leshort     -16
# e9 = a 2-byte JMP distance
>>>>>>>32       ubyte       0xe9
>>>>>>>>(33.s+35)   use     lha_sfx_exe_part2
# eb = a 1-byte JMP distance
>>>>>>>32       ubyte       0xeb
>>>>>>>>(33.b+34)   use     lha_sfx_exe_part2

0           name    lha_sfx_exe_part2
>0          string  \xFC\xBC\x00\x01
>>&0        string  \xBB
# (missing byte here is 0x05 or 0x06)
>>>&1       string  \x01\xE8
>>>>&2      string  \x8C\xC8
>>>>>0      byte    x   \b, LHarc self-extracting archive

>>&0        string  \x8C\xC8\x05
# (missing byte here is 0x88 or 0x8C)
>>>&1       string  \x00\x8E\xC0
>>>>0       byte    x   \b, LHA self-extracting archive
# (next byte is 0xE8 or 0xEB)

# ----------
# LArc self-extracting EXE

0           name    exe_larc_sfx
# @8 = header size, should be 2
>8          uleshort    0x0002
# @20 = IP, should be 92
>>20        uleshort    0x005c

>>>136      string  \xe8\xe2\x01\xbd\x00\x32\x88\x5e\x2e\x8f\x46\x2c
>>>>0       byte    x   \b, LArc self-extracting archive

# ----------
# Graphic Workshop self-displaying picture

0      name    exe_gws

# @16 = SP register, expected to be 0x0200
>16       uleshort      0x0200
# @24 = reloc. table offset, expected to be 34
>>24      uleshort      34

>>>(8.s*16)     byte     x
>>>>&28         string   GraphicWorkshop
>>>>>0          use      exe_gws_part2
>>>>&28         string   GWS/Windows
>>>>>0          use      exe_gws_part2

0           name      exe_gws_part2
>(8.s*16)   byte      x   \b, Graphic Workshop self-displaying picture
>>&10       uleshort  x   \b, %u x
>>&12       uleshort  x   %u
>>&16       uleshort  x   \b, %u bits/pixel
>>&18       uleshort  1   \b, uncompressed

# ----------
# GRABBER (v3.60?-3.??) self-displaying screen capture

0           name        exe_grabber

# @8 = header size, should be 3
>8          uleshort    0x0003
# @22 = CS, should be 8
>>22        leshort     8
>>>48       string      \x0dCreated\ by\ GRABBER
>>>>0       byte        x    \b, GRABBER

# ----------
# TXT2EXE and other stuff by P. Fischer-Haaser

0       name    exe_txt2exe_pfh
>28     string  \x57\x9a\x51\x50   \b, TXT2EXE (Fischer-Haaser) (v3.x?)
>28     string  pfh\x00            \b, TXT2EXE (Fischer-Haaser) (v4.x?)

# ----------
# ARC self-extracting archives

0       name    exe_arc_sfx

# @24 = reloc. table offset, should be 30
>24        uleshort 30

>>(8.s*16)  string  \x8c\xc8\x8c\xdb\x8e\xd8\x8e\xc0
>>>&0       string  \x89\x1e\xaa\x00\x2b\xc3\xa3\xac
>>>>&0      string  \x00\x89\x26\xae\x00\xbe\xb6\x00\xb9
>>>>>0      byte    x     \b, ARC self-extracting archive
>>>>>&0     string  \x3a\x1b    (v6.00-6.01)
>>>>>&0     string  \x63\x1c    (v6.02var1)
>>>>>&0     string  \x59\x1c    (v6.02var2)

>>2        string   \x6d\x00\x13\x00
>>>7772    string   .arc
>>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.x, /R)

>>2        string   \xcf\x00\x14\x00
>>>8345    string   .arc
>>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.10, /R)

>>2        string   \x9d\x01\x14\x00
>>>8519    string   .arc
# This byte distinguishes SFX archives from XARC.EXE.
>>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.12, /R)

>>2        string   \x1e\x00\x14\x00
>>>8844    string   PKSFX
>>>>9758   ubyte    0x1a    \b, PKARC self-extracting archive (v3.5)

>>2        string   \x68\x01\x1a\x00
>>>9696    string   PKSFX
>>>>13160  ubyte    0x1a    \b, PKARC self-extracting archive (v3.6)

>>2        string   \x52\x01\x1a\x00
>>>9680    string   PKSFX
>>>>13138  ubyte    0x1a    \b, PKPAK self-extracting archive (v3.61)

0       name    exe_ne_arc_sfx

# /F = hybrid OS/2 & DOS?
# /P = OS/2 only?

>2        string   \x6e\x00\x27\x00
>>7772    string   .arc
>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.x, /F)

>2        string   \x88\x00\x2a\x00
>>8793    string   .arc
>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.10, /F)

>2        string   \xb6\x00\x2a\x00
>>8967    string   .arc
>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.12, /F)

>2        string   \x00\x01\x0f\x00
>>6146    string   .arc
>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.x, /P)

>2        string   \x7e\x01\x15\x00
>>9077    string   .arc
>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.10, /P)

>2        string   \xac\x01\x15\x00
>>9091    string   .arc
>>>&4     ubyte    0x01    \b, ARC self-extracting archive (v7.12, /P)

# ----------
# PAK (NoGate Consulting) self-extracting archives

0       name    exe_paknogate_sfx

# @24 = reloc. table offset, should be ...
>24          uleshort   34
>>(8.s*16)   string   \xfb\xba\x53\x03\x2e\x89\x16\x65\x01\xb4\x30\xcd
>>>0         byte     x  \b, PAK (NoGate) self-extracting archive (v1.0)

>>(8.s*16)   string   \x55\x8b
>>>&7        string   \x0b\xc9\x74\x17\xc4\x76\x04\xb7\x00
>>>>0        byte     x  \b, PAK (NoGate) self-extracting archive
# @20 = IP register
>>>>20       uleshort  2074   (v1.51)
>>>>20       uleshort  2144   (v1.6)

>>(8.s*16)   string   \0\x55\x8b
>>>&7        string   \x0b\xc9\x74\x17\xc4\x76\x04\xb7\x00
>>>>0        byte     x  \b, PAK (NoGate) self-extracting archive (v2.01-2.10)

>24          uleshort   62
>>(8.s*16)   string   \0\0\0\x55\x8b
>>>&7        string   \x0b\xc9\x74\x17\xc4\x76\x04\xb7\x00
>>>>0        byte     x  \b, PAK (NoGate) self-extracting archive (v2.50-2.51)
