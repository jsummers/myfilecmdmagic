
# "file command" rules for miscellaneous files
#
# By Jason Summers, 2024-2025 - Not copyrighted, unless noted.

# ----------
# DIET-compressed data file

0       string/b    \xb4\x4c\xcd\x21\x9d\x89
>0      byte        x       DIET compressed file (v1.00-1.00d)

0       string/b    \x9d\x89\x64\x6c\x7a
>0      byte        x       DIET compressed file (v1.02b-1.20)

0       string/b    \xb4\x4c\xcd\x21\x9d\x89\x64\x6c\x7a
>0      byte        x       DIET compressed file (v1.44-1.45f)

# ----------
# Comic Chat

0       string/b   \x81\x00
>2      uleshort   >0x0000
>>2     uleshort   <0x0003
>>>4    uleshort   0x0001
# Value at offset 6 is a "tag". Tags for this version are
# believed to be from 0x0001 to 0x0009 (but we allow for more).
# We expect 0x0001 here.
>>>>6   uleshort   <0x0020
>>>>>0  byte       x  MS Comic Chat character (v1.0-2.1)
!:ext   avb

0       string/b   \x81\x81
>2      uleshort   >0x0000
>>2     uleshort   <0x0003
>>>4    uleshort   0x0002
# Value at offset 6 is a "tag". Tags for this version are
# believed to be from 0x0001 to 0x0107 (but we allow for more).
# We expect 0x0001 or 0x0107 here.
>>>>6   uleshort   <0x0120
>>>>>0  byte       x  MS Comic Chat character (v2.5)
!:ext   avb

0       string/b   \x81\x81\x03\x00\x02\x00
# Value at offset 6 is a "tag". Tags for this subtype are
# believed to be from 0x0001 to 0x0107 (but we allow for more).
# (Actually, only tags from 0x0102 to 0x0107 have been seen in
# background image files.)
# We expect 0x0103 or 0x0107 here.
>6      uleshort   <0x0120
>>0     byte       x  MS Comic Chat background (v2.5)
!:ext   bgb

# ----------
# STOS

0       string/b   Lionpoubnk
>10     ubelong    0              STOS MBS
>10     ubelong    !0             STOS memory bank
>>14    ubyte      0x01           \b, type work
>>14    ubyte      0x02           \b, type screen
>>14    ubyte      0x82           \b, type datascreen
>>14    ubyte      0x84           \b, type set
>>>18   ubelong    0x06071963     \b, containing character set
>>14    ubyte      0x85           \b, type packed files
>>14    ubyte      0x81           \b, type data, containing
>>>18   clear      x
>>>18   ubelong    0x06071963     picture bank
>>>>22  ubeshort   x              \b, res %u
>>>18   ubelong    0x13490157     music bank
>>>18   ubelong    0x19861987     sprite bank
>>>18   ubelong    0x28091960     icon bank
>>>18   ubelong    0x4d414553     Maestro music
>>>18   default    x
>>>>18  ubelong    x              type 0x%08x

0       ubelong    0x06071963
>4      ubeshort   <3
# @18=flags. Don't know what's valid, but I've only seen 0-3,
# and this is one of the only decent ways to distinguish it from
# the AMOS format.
>>18    ubeshort   <8             STOS picture bank
>>>4    ubeshort   x              \b, res %u

0       ubelong    0x19861987     STOS sprite bank

# ----------
# AMOS formats

0         ubelong     0x06071963
# @8="width in bytes", tested because it corresponds to a STOS field
# that's often (but unfortunately not always) 0.
>8        ubeshort    !0
# @14=bitplanes
>>14      ubeshort    >0
>>>14     ubeshort    <7          AMOS picture (without palette)
>>>>14    ubeshort    x           \b, %u bits

3         ubyte       0x90
>0        ubelong     0x12031990
>>0       use         amos_pic_part2
>0        ubelong     0x00031990
>>0       use         amos_pic_part2
>0        ubelong     0x12030090
>>0       use         amos_pic_part2

0         name        amos_pic_part2
>90       ubelong     0x06071963
>>98      ubeshort    !0
>>>104    ubeshort    >0
>>>>104   ubeshort    <7          AMOS picture
>>>>>22   ubeshort    x           \b, %u colors
>>>>>104  ubeshort    x           \b, %u bits

# ----------
# REKO cardset

0       string/b    REKO
>8      ubyte       0           REKO cardset (Amiga)
>>20    ubyte       x           \b, %u-bit
>>18    ubyte       &0x08       \b, HAM
>>21    ubyte       x           \b, %u cards

0       string/b    PCREKO
>6      ubeshort    0x4420      REKO cardset (PC; RKP 8)
>>20    ubyte       x           \b, %u-bit
>>21    ubyte       x           \b, %u cards
>6      ubeshort    0x0000      REKO cardset (PC; RKP 16)
>>20    ubyte       x           \b, %u-bit
>>21    ubyte       x           \b, %u cards

0       string/b    PCRKP\x00   REKO cardset (PC; RKP 24)
>24     ubyte       x           \b, %u-bit
>8      ulelong     0           \b, JPEG
>8      ulelong     !0          \b, BMP
>28     ubyte       x           \b, %u cards

# ----------
# Wiz Solitaire

0       string/b    WizSolitaireDeck  Wiz Solitaire deck
!:ext   deck

# ----------
# PC Paint PIC

0       uleshort    0x1234
>11     ubyte       0xff
>>10    ubyte       0x01
>>>0    use         pcpaint_part2
>>10    ubyte       0x02
>>>0    use         pcpaint_part2
>>10    ubyte       0x04
>>>0    use         pcpaint_part2
>>10    ubyte       0x08
>>>0    use         pcpaint_part2
>>10    ubyte       0x11
>>>0    use         pcpaint_part2
>>10    ubyte       0x31
>>>0    use         pcpaint_part2

0       name        pcpaint_part2
>0      byte        x       PC Paint PIC
!:ext   pic
>0      clear       x
>12     ubyte       <0x30
>>0     use         pcpaint_image
>12     ubyte       >0x33
>>0     use         pcpaint_image
>0      default     x
>>0     byte        x       text data

0       name        pcpaint_image
>0      byte        x       image data
>2      uleshort    x       \b, %u x
>4      uleshort    x       %u
>10     ubyte       0x01    \b, 2-color
>10     ubyte       0x02    \b, 4-color
>10     ubyte       0x04    \b, 16-color
>10     ubyte       0x08    \b, 256-color
>10     ubyte       0x11    \b, 4-color planar
>10     ubyte       0x31    \b, 16-color planar

0       string/b    \xfd\x00\xb8\x00\x00
>5      uleshort    0
>>7     string      \x00\x40\x02\x00
>>>13   string      \x00\x20       PC Paint compressed BSAVE image data
>5      uleshort    !0
>>8007  string      PCPaint\ V1.   BSAVE image data (PC Paint extension)

# ----------
# Inset PIX

# There's no good way to identify all Inset PIX files, but we'll try to
# identify most files as they are constructed in practice.

# Expecting version 3.
0       uleshort    3
# First item in directory: Expecting id=0, len=32.
>4      string      \x00\x00\x20\x00
# Expecting the number of items to be relatively small.
>>2     uleshort    >3
>>>2    uleshort    <200
# Follow the first item's pointer. Make sure we can read 32
# bytes starting at that offset.
>>>>(8.l+31)    byte          x       Inset PIX
!:ext   pix
>>>>>(8.l+1)    ubyte&0x01    0x00    text data
>>>>>(8.l+1)    ubyte&0x01    0x01    image data
>>>>>>(8.l+18)  uleshort      x       \b, %u x
>>>>>>(8.l+20)  uleshort      x       %u

# ----------
# Storyboard PIC/CAP

0       string/b    EP_CAP    Storyboard PIC/CAP (old)
>7      ubyte   0x03    text screen capture
>7      ubyte   0x04    image data, 4-color
>7      ubyte   0x06    image data, 2-color
# (Other modes exist.)

2       ubyte   0xc1
>4      ubyte   0x00
>>0     ubyte   0x00
>>>0    use     storyboard_partn2
>>0     ubyte   0x54
>>>0    use     storyboard_partn2

0       name    storyboard_partn2
>1      string  \x84\xc1\x01
>>0     use     storyboard_partn3
>1      string  \x84\xc1\x03
>>0     use     storyboard_partn3
>1      string  \x84\xc1\x07
>>0     use     storyboard_partn3
>1      string  \x84\xc1\x08
>>0     use     storyboard_partn3
>1      string  \x85\xc1\x0a
>>0     use     storyboard_partn3
>1      string  \x86\xc1\x0b
>>0     use     storyboard_partn3

0       name    storyboard_partn3
>0      byte    x     Storyboard PIC/CAP (new) image data
>3      ubyte   0x01  \b, 640x200, 16-color
>3      ubyte   0x03  \b, 640x350, 16-color
>3      ubyte   0x07  \b, 640x480, 16-color
>3      ubyte   0x08  \b, 320x200, 4-color
>3      ubyte   0x0a  \b, 320x200, 256-color
>3      ubyte   0x0b  \b, 640x480, 256-color

# ----------
# BMP

0       string      BM
# bfOffBits shouldn't be too big
>10     ulelong     <2048

# BMPCOREHEADER
>>14        ulelong     12
# @22 = planes
>>>22       uleshort    1
# @24 = bitcount
>>>>24      uleshort    >0
>>>>>24     uleshort    <25
>>>>>>0     use         bmp_v2

# BMPINFOHEADER
>>14        ulelong     >15
# @26 = planes
>>>26      uleshort    1
# @28 = bitcount
>>>>28     uleshort    <65
>>>>>14    ulelong     <65
>>>>>>0    use         bmp_v3
>>>>>14    ulelong     68
>>>>>>0    use         bmp_pegasuspic
>>>>>14    ulelong     108
>>>>>>0    use         bmp_v3
>>>>>14    ulelong     124
>>>>>>0    use         bmp_v3

0       name      bmp_v2
>0      byte      x     BMP image data
>2      ulelong   26    \b, OS/2 v1
>2      ulelong   !26   \b, Windows v2 or OS/2 v1
>18     uleshort  x     \b, %u x
>20     uleshort  x     %u
>24     uleshort  x     \b, %u bits/pixel

0       name      bmp_v3
>0      byte      x       BMP image data

>0      clear     x
>14     ulelong   16      \b, OS/2 v2
>14     ulelong   24      \b, OS/2 v2
>14     ulelong   36      \b, OS/2 v2
>14     ulelong   40
>>2     ulelong   54      \b, OS/2 v2
>>2     ulelong   !54     \b, Windows v3
>14     ulelong   48      \b, OS/2 v2
>14     ulelong   56      \b, Windows v3+ (Photoshop variant)
>14     ulelong   64      \b, OS/2 v2
>14     ulelong   108     \b, Windows v4
>14     ulelong   124     \b, Windows v5
>0      default   x
>>0     byte      x       \b, v?

>0      use       bmp_dimensions_etc
# Header must be at least 20 bytes to have compression field.
>14     ulelong   >19
>>30    ulelong   >0
>>>30   ulelong   <3      \b, RLE compressed

# Pegasus PIC
0       name        bmp_pegasuspic
>30     string      JPEG    Pegasus PIC image data
>>0     use         bmp_dimensions_etc

# BMP - Print (v3 format) dimensions & bit count
0       name        bmp_dimensions_etc
>18     lelong      x       \b, %d x
>22     lelong      >-1     %d
>22     lelong      <0
>>22    lelong*-1   x       %d
>28     uleshort    !0
>>28    uleshort    x       \b, %u bits/pixel

# ----------
# OS/2 Bitmap array

0           string      BA
>14         string      BM

>>28        uleshort    12
# @36 = planes
>>>36       uleshort    1     OS/2 bitmap array
>>>>0       byte        x     \b, of bitmaps

>>28        uleshort    >15
>>>28       uleshort    <65
# @40 = planes
>>>>40      uleshort    1     OS/2 bitmap array
>>>>>0      byte        x     \b, of bitmaps

# ----------
# ARC archive, and related things

# There's not much magic to work with here.
# We won't try to detect rare or pathological files.

0     ubyte   0x1a

# ARC
>1    ubyte   >1
>>1   ubyte   <7
>>>0  use     arc_part2

# ARC & PAK
>1    ubyte   >7
>>1   ubyte   <12
>>>0  use     arc_part2

# ARC v7
>1    ubyte   20
>>2   ubyte   0
# ("part3" is not a typo)
>>>0  use     arc_part3

# Spark
>1    ubyte   0x82
>>0   use     arc_part2
>1    ubyte   0x83
>>0   use     arc_part2
>1    ubyte   0x88
>>0   use     arc_part2
>1    ubyte   0x89
>>0   use     arc_part2
>1    ubyte   0xff
>>0   use     arc_part2

# (test filename)
0        name    arc_part2

# Test 1st byte of filename
>2        ubyte   >0x20
>>2       ubyte   <0x7f

# Test 2nd byte of filename
>>>3      ubyte   0x00
>>>>0     use     arc_part3
>>>3      ubyte   >0x20
>>>>3     ubyte   <0x7f
>>>>>0    use     arc_part3

0       name      arc_part3
>1      ubyte     <9
>>1     string    \x03Descript\x00  BTSPK archive data
!:ext   bts
>>0     default   x
>>>0    byte      x       ARC archive data
!:ext   arc
>1      ubyte     9       ARC archive data (PKARC variant)
!:ext   arc
>1      ubyte     >9
>>1     ubyte     <12     ARC archive data (PAK variant)
!:ext   pak
>1      ubyte     20      ARC archive data (v7)
!:ext   arc
>1      ubyte     >0x7f   Spark archive data
!:ext   spk/arc

# ----------
# PackIt (classic Mac format)

0       string    PMa
>3      ubyte     <0x37
>>3     ubyte     >0x30
>>>3    ubyte     !0x33
>>>>0   use       packit_part2
>3      ubyte     0x67
>>0     use       packit_part2

0       name      packit_part2
>0      byte      x      PackIt archive data
>>3     ubyte     0x34   \b, compressed
>>3     ubyte     0x67   \b, uncompressed

# ----------
# Aldus LZW and PKZP

0       string/b  ALDUS\x20
>6      string    PKZP    Aldus PKZP compressed file

>6      string    LZW     Aldus LZW compressed file
>>60    ubyte     0       \b, Windows
>>60    ubyte     >31     \b, Macintosh
>>>60   use       mac_type_creator
>>>82   ubyte     1       \b, resource fork only

# ----------
# InstallShield Z

0       string        \x13\x5d\x65\x8c\x3a\x01\x02\x00
>0      byte          x     InstallShield Z archive data
>12     uleshort      x     \b, %u file(s)
>14     lemsdosdate   x     \b, timestamp=[%s
>16     lemsdostime   x     %s]
>10     uleshort      0     \b, single-volume
>10     uleshort      1     \b, volume
>>31    ubyte         x     %u
>>30    ubyte         !0    of %u
>>30    ubyte         0     of ?

# ----------
# Raw PKWARE DCL Implode data
# (Also known as TTCOMP.)

0       ubyte   <2
# 6 is common; 4 and 5 are rare (maybe shouldn't even be included?).
>1      ubyte   >3
>>1     ubyte   <7

# This relies on a "use" rule evaluating to true if and only if
# something was printed via the "name" routine. That seems to be
# the intended (and actual) behavior, but might not be clearly
# documented.

>>>0    use     dclimplode-eof
>>>>0   use     dclimplode-header

0       name                dclimplode-eof
>-2     ubeshort            0x01ff
>>0     use                 dclimplode-id
>-4     ubelong&0x0080ffff  0x0080807f
>>0     use                 dclimplode-id
>-4     ubelong&0x00c0ffff  0x0040c03f
>>0     use                 dclimplode-id
>-4     ubelong&0x00e0ffff  0x0020e01f
>>0     use                 dclimplode-id
>-4     ubelong&0x00f0ffff  0x0010f00f
>>0     use                 dclimplode-id
>-4     ubelong&0x00f8ffff  0x0008f807
>>0     use                 dclimplode-id
>-4     ubelong&0x00fcffff  0x0004fc03
>>0     use                 dclimplode-id
>-4     ubelong&0x00feffff  0x0002fe01
>>0     use                 dclimplode-id

0       name    dclimplode-id
>0      byte    x       PKWARE DCL Implode compressed data

0       name    dclimplode-header
>0      ubyte   1       \b, ASCII-optimized
>1      ubyte   4       \b, 1K
>1      ubyte   5       \b, 2K
>1      ubyte   6       \b, 4K
>1      ubyte   x       dictionary

# ----------
# DWC archive
-3      string/b    DWC
>&-27   string      \x1b\x00\x22    DWC archive
!:ext   dwc

# ----------
# InstallIt!: DOS installer by Coffee Mug Software
#
# Usually ends with something like ..."xxxx32", where the "x"s are
# padding. It's probably safe to assume there will be at least one "x".
-3      string/b   x32
>&-43   string     CP2.00          InstallIt! archive

# ----------
# PCX
#
# Portions of this section are based on rules from the darwinsys
# version of file (I want the output to be similar), so there could
# be copyrighted material here.

0         ubyte   0x0a
>1        ubyte   <6
>>1       ubyte   !1
>>>2      ubyte   <2
>>>>3     ubyte   1
>>>>>0    use     pcx_part2
>>>>3     ubyte   2
>>>>>0    use     pcx_part2
>>>>3     ubyte   4
>>>>>0    use     pcx_part2
>>>>3     ubyte   8
>>>>>0    use     pcx_part2

0       name    pcx_part2
>0      byte    x   PCX image data
!:mime  image/vnd.zbrush.pcx
!:ext   pcx/pcc
>1      ubyte   0   \b, PC Paintbrush v2.5
>1      ubyte   2   \b, PC Paintbrush v2.8 (with palette)
>1      ubyte   3   \b, PC Paintbrush v2.8 (without palette)
>1      ubyte   4   \b, Paintbrush for Windows
>1      ubyte   5   \b, PC Paintbrush v3.0+

# dimensions
>4      ulelong      0
>>8     uleshort+1   x     \b, %u x
>>10    uleshort+1   x     %u
>4      ulelong      !0
>>4     uleshort     x     \b, bounding box [%d,
>>6     uleshort     x     %d] -
>>8     uleshort     x     [%d,
>>10    uleshort     x     %d]

# color type
>3      ubyte   1
>>65    ubyte   x     \b, %u-bit colour
>>65    ubyte   !1    planar

>3      ubyte   !1
>>65    ubyte   1
>>>3    ubyte   x     \b, %u-bit colour

>>3     ubyte   8
>>>65   ubyte   3     \b, 24-bit colour
>>>65   ubyte   4     \b, 32-bit colour

>>68    uleshort  2   \b, grayscale mode

# Resolution. Unfortunately, this is often wrong.
>14     ulelong   !0
>>12    uleshort  !0    \b, %u x
>>>14   uleshort  x     %u dpi

>2      ubyte     0     \b, uncompressed
>0      use       pcx_appl

# Special PCX-based formats
0         name      pcx_appl
>4        uleshort  80
>>1       string    \x05\x01\x01
>>>8      string    \x7f\x02\xdf\x01
>>>>65    ubyte     4
>>>>>16   string    \0\0\0\0\0\0\0\0
>>>>>>0   use       pcx_berts
>>>>>16   string    \x80\x80\x80\0\0\0\0\0\xfc
>>>>>>0   use       pcx_berts

0         name      pcx_berts
>0        byte      x   \b, BMG (Bert's Coloring Programs)

# ----------
# Dr. Halo PIC

0         string/b  AH
>4        uleshort  0
>>2       uleshort  >199
>>>2      uleshort  <230
>>>>6     ubyte     0x02  Dr. Halo PIC image data
!:ext   pic
>>>>>7    ubyte     0x01  \b, CGA
>>>>>7    ubyte     0x07  \b, Hercules
>>>>>7    ubyte     0x15  \b, EGA, 16-color
>>>>>7    ubyte     0x3c  \b, VGA
>>>>>7    ubyte     0x47  \b, VGA, 16-color
>>>>6     ubyte     0x0a  Dr. Halo palette

# ----------
# MS Compress, etc.

0     string    SZDD\x88\xf0\x27\x33
>0    byte      x       MS Compress, "SZDD" variant

0     string    KWAJ\x88\xf0\x27\xd1
>0    byte      x       MS Compress, "KWAJ" variant
>8    uleshort  x       \b, cmpr type %u
>8    uleshort  2       (LZSS)
>8    uleshort  3       (LZH)
>8    uleshort  4       (MSZIP)

0     string    SZ\x20\x88\xf0\x27\x33
>0    byte      x       MS Compress, "SZ" variant
>7    ubyte     <0xd1   \b, fragment %u

0     string    MRNZ\x88\xf0\x27\x33
>0    byte      x       MRNZ installer archive
>12   string    \xe5\xf9\xef\xe4\x26\x5e\x89\x7f
>>0   byte      x       \b, containing KWAJ archive

0     string    FXPF\0
>0    byte      x       Microsoft FXPF patch file

# ----------
# OS/2 PACK

0     string    \xa5\x96
>2    uleshort  0x0a14  OS/2 PACK archive, 0x%04x variant
>2    uleshort  0x1400  OS/2 PACK archive, 0x%04x variant
>2    uleshort  0xfffd  OS/2 PACK archive, PACK2 version
>2    uleshort  0xfffe  OS/2 PACK archive, 0x%04x variant
>2    uleshort  0xffff  OS/2 PACK archive, 0x%04x variant

# ----------
# ARJ

# Some of the words in this section were copied from the darwinsys
# version of file, so there could be copyrighted material here.

0       uleshort   0xea60
>10     ubyte      0x02      ARJ archive data
!:ext   arj
>>0     use        arj-archive

0       name       arj-archive
>5      ubyte      x         \b, v%u
>5      ubyte      1         (ARJ 0.13-0.14)
>5      ubyte      2         (ARJ 0.15-1.00)
>5      ubyte      3         (ARJ 1.10-2.22)
>5      ubyte      4         (ARJ 2.30)
>5      ubyte      5         (ARJ 2.39a-2.39b)
>5      ubyte      6         (ARJ 2.39c-2.41a)
>5      ubyte      7         (ARJ 2.42a-2.50a)
>5      ubyte      8         (ARJ 2.55-2.61)
>5      ubyte      9         (ARJ 2.62-2.63)
>5      ubyte      10        (ARJ 2.63-2.76)
>5      ubyte      11        (ARJ 2.81+)
>5      ubyte      51        (ARJZ)
>5      ubyte      100       (ARJ32 3.00a-3.01a)
>5      ubyte      101       (ARJ32 3.02-3.09)
>5      ubyte      102       (ARJ32 3.10+)

>6      ubyte      >1        \b, min to extract: %u

>7      ubyte      x         \b, os: %u
>7      ubyte      0         (MS-DOS)
>7      ubyte      2         (Unix)
>7      ubyte      3         (Amiga)
>7      ubyte      4         (Mac)
>7      ubyte      5         (OS/2)
>7      ubyte      10        (Windows)
>7      ubyte      11        (Windows)

>8      ubyte      &0x01     \b, password-protected
# Knowing if the files are password-protected is important, but the flag
# in the archive header doesn't always tell us. So, also look at the
# first member file.
# (For more info about this logic, see the multi-volume section below.)
>8      ubyte      ^0x01
>>(2.s+8)   uleshort    0
>>>&0       uleshort    0xea60
>>>>&6      ubyte       &0x01   \b, password-protected

# ANSIPAGE (depends on format version)
>8      ubyte      &0x02
>>5     ubyte      >8
>>>5    ubyte      <50       \b, ANSI codepage
>>5     ubyte      >99       \b, ANSI codepage

>8      ubyte      &0x08     \b, recoverable
>>34    ubyte      x         (factor %u)

>8      ubyte      &0x02
>>5     ubyte      <9        \b, secured (old)
>8      ubyte      &0x40
>>9     ubyte      >1        \b, secured (
>>>9    ubyte      x         \bv%u
>>>24   ulelong    x         \b, envelope: pos=%u
>>>30   uleshort   x         \b, len=%u)

# Test for multi-volume archives.
# To get full info, we need both the EXTFILE flag of the first
# member file, and the VOLUME flag of the archive header.
# Simplest way is to find the first member file, then look back at
# the archive header.
#
# Make sure there are no extended headers. (Highly unlikely that
# there are any, but if so, give up on this.)
>(2.s+8)   uleshort    0
# An extra test to make sure we're in the right place.
>>&0       uleshort    0xea60
# 0x08 is the EXTFILE flag of the first archive member.
>>>&6      ubyte       &0x08   \b, multi-volume
# 0x04 is the VOLUME flag of the archive header.
# (Note that member files also have the VOLUME flag, but we'd have
# to look at the *last* member file, not the first.)
>>>>8      ubyte       &0x04   (middle part)
>>>>8      ubyte       ^0x04   (last part)
>>>&6      ubyte       ^0x08
>>>>8      ubyte       &0x04   \b, multi-volume (first part)

# PATHSYM (Meh. Even if this were useful, here it technically only
# applies to the name of the archive itself, not the filenames in
# the archive.)
#>8      ubyte      &0x10     \b, slash-switched

>8      ubyte      &0x20     \b, backup
>8      ubyte      &0x80     \b, dual-name

# TODO: Some rare files use Unix time format instead, and it's
# supposed to be possible to detect such files, though it might
# be unpleasant to write the rules.
>14     lemsdosdate   x      \b, created=[%s
>12     lemsdostime   x      %s]

# Mod time was added in format v6.
>5      ubyte         >5
>>18    lemsdosdate   x      \b, modified=[%s
>>16    lemsdostime   x      %s]

# TODO?: Chapters
# TODO?: ALTVOLNAME_FLAG

# Archive name is NUL terminated. We can find it using the
# "first_hdr_size" field.
>(4.b+4)    string/80   x   \b, original name: %s

# ----------
# DIV Games Studio

3     string/b  \x1a\x0d\x0a\x00
>0    string    map     DIV Games Studio image
!:ext   map
>>8   uleshort  x       \b, %u x
>>10  uleshort  x       %u
>0    string    fpg     DIV Games Studio image archive
!:ext   fpg
>0    string    f16     DIV Games Studio image archive
!:ext   fpg
>>0   byte      x       (16 bits/pixel)
>0    string    pal     DIV Games Studio palette
!:ext   pal
>0    string    fnt     DIV Games Studio font
!:ext   fnt

# ----------
# Pegasus ePIC, "PIC2" version

0       string/b  PIC2
# Type of 1st segment; expecting 1.
>4      ubyte     0x01
# Expecting segment 1 size to be 8, or at least small.
>>5     ulelong   >7
>>>5    ulelong   <33   Pegasus PIC2 image data
!:ext   pic

# ====================
# Shared routines

0       name   mac_type_creator
>0      string/4  x       \b, type '%s'
>4      string/4  x       \b, creator '%s'
